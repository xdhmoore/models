# SSD with Mobilenet v1, configured for Oxford-IIIT Pets Dataset.
# Users should configure the fine_tune_checkpoint field in the train config as
# well as the label_map_path and input_path fields in the train_input_reader and
# eval_input_reader.

model {
  ssd {
    num_classes: 37
    box_coder {
      faster_rcnn_box_coder {
        y_scale: 10.0
        x_scale: 10.0
        height_scale: 5.0
        width_scale: 5.0
      }
    }
    matcher {
      argmax_matcher {
        matched_threshold: 0.5
        unmatched_threshold: 0.5
        ignore_thresholds: false
        negatives_lower_than_unmatched: true
        force_match_for_each_row: true
      }
    }
    similarity_calculator {
      iou_similarity {
      }
    }
    anchor_generator {
      ssd_anchor_generator {
        num_layers: 6
        min_scale: 0.2
        max_scale: 0.95
        aspect_ratios: 1.0
        aspect_ratios: 2.0
        aspect_ratios: 0.5
        aspect_ratios: 3.0
        aspect_ratios: 0.3333
      }
    }
    image_resizer {
      fixed_shape_resizer {
        # TODO try 512, I think in the paper it did better
        height: 300
        width: 300
      }
    }
    box_predictor {
      convolutional_box_predictor {
        min_depth: 0
        max_depth: 0
        num_layers_before_predictor: 0
        use_dropout: false
        dropout_keep_probability: 0.8
        kernel_size: 1
        box_code_size: 4
        apply_sigmoid_to_scores: false
        conv_hyperparams {
          activation: RELU_6,
          regularizer {
            l2_regularizer {
              weight: 0.00004
            }
          }
          initializer {
            truncated_normal_initializer {
              stddev: 0.03
              mean: 0.0
            }
          }
          batch_norm {
            train: true,
            scale: true,
            center: true,
            decay: 0.9997,
            epsilon: 0.001,
          }
        }
      }
    }
    feature_extractor {
      type: 'ssd_mobilenet_v1'
      min_depth: 16
      depth_multiplier: 1.0
      conv_hyperparams {
        activation: RELU_6,
        regularizer {
          l2_regularizer {
            weight: 0.00004
          }
        }
        initializer {
          truncated_normal_initializer {
            stddev: 0.03
            mean: 0.0
          }
        }
        batch_norm {
          train: true,
          scale: true,
          center: true,
          decay: 0.9997,
          epsilon: 0.001,
        }
      }
    }
    loss {
      classification_loss {
        weighted_sigmoid {
        }
      }
      localization_loss {
        weighted_smooth_l1 {
        }
      }
      hard_example_miner {
        num_hard_examples: 3000
        iou_threshold: 0.99
        loss_type: CLASSIFICATION
        max_negatives_per_positive: 3
        min_negatives_per_image: 0
      }
      classification_weight: 1.0
      localization_weight: 1.0
    }
    normalize_loss_by_num_matches: true
    post_processing {
      batch_non_max_suppression {
        score_threshold: 1e-8
        iou_threshold: 0.6
        max_detections_per_class: 100
        max_total_detections: 100
      }
      score_converter: SIGMOID
    }
  }
}


# This is needed in eval mode for the optimizer config for some reason
train_config: {
  # TODO should this be 1?
  batch_size: 24
  optimizer {
    rms_prop_optimizer: {
      learning_rate: {
        exponential_decay_learning_rate {
          initial_learning_rate: 0.004
          decay_steps: 800720
          decay_factor: 0.95
        }
      }
      momentum_optimizer_value: 0.9
      decay: 0.9
      epsilon: 1.0
    }
  }
  fine_tune_checkpoint: "/data/starting_checkpoint/model.ckpt-597359"
  from_detection_checkpoint: true
  load_all_detection_checkpoint_vars: true
  # Note: The below line limits the training process to 200K steps, which we
  # empirically found to be sufficient enough to train the pets dataset. This
  # effectively bypasses the learning rate schedule (the learning rate will
  # never decay). Remove the below line to train indefinitely.

  num_steps: 598000
  data_augmentation_options {
    random_horizontal_flip {
    }
  }
  data_augmentation_options {
    ssd_random_crop {
    }
  }
}

train_input_reader: {
  tf_record_input_reader {
    #input_path: "{{ input_training_tfrecord }}"
    input_path: "/data/sharks/ckcgqorltvxoi08974xshx1wi_2020-10-19T0147_2950.tfrecord"
    #input_path: "/data/new-sharks/tfrecord/ckcgqorltvxoi08974xshx1wi_2020-12-30T1944_3224.tfrecord"
    #input_path: "/data/mini-shark/tfrecord/ckcgqorltvxoi08974xshx1wi_2021-01-08T1930_10.tfrecord"
  }
  #TODO it looks like different times downloading labelbox data result in different ordered/id'd label
  # files. Maybe there's a more stable way to retrieve them from labelbox. Maybe there's a way to always
  # order them in the same order they were added to labelbox. Or maybe I don't need them. Look at the code
  # again. There's a place where it'su using some sort of backup handler to handle the two cases
  label_map_path: "/data/sharks/ckcgqorltvxoi08974xshx1wi_2020-10-19T0147.pbtxt"
  #label_map_path: "/data/new-sharks/tfrecord/ckcgqorltvxoi08974xshx1wi_2020-12-30T1944.pbtxt"
  #label_map_path: "/data/mini-shark/tfrecord/ckcgqorltvxoi08974xshx1wi_2021-01-08T1930.pbtxt"
}

eval_config: {
  metrics_set: "coco_detection_metrics"
  #num_examples: 738
  num_examples: 10

  # TODO make this a variable? Myabe I should just make all these paths relative
  # TODO these don't work
  num_visualizations: 10
  visualization_export_dir: "/model_dir/eval/eval_image_out"
  export_path: "/model_dir/eval_json_out"
  # TODO is there a way to empirically get at the best number here?
  min_score_threshold: 0.2

  # Max num of boxes per detection or gt box list image, per image, so a value of 20 means 
  # for the side-by-side image visualizations, 20 max gt and 20 max detection boxes, 40 total per single image visualization
  # max_num_boxes_to_visualize : 20

  # TODO mark as unused. by default it visualizes groundtruth boxes
  #visualize_groundtruth_boxes : true

  # TODO try this:
  #include_metrics_per_category 

  # TODO try this, fix this?
  keep_image_id_for_visualization_export : true

  # TODO this might be useful for skipping unlabeled data:
  # skip_predictions_for_unlabeled_class : true

  # TODO are these used?
  #groundtruth_box_visualization_color = "blue"
  # TODO not sure if this is useful, I may want the preprocessed images saved to the final graph or whatever?
  # retain_original_images


  # TODO go through all eval.proto options and search for their use in obj detection, mark deprecated?


}
# TODO look at input_reade.proto optimizations for input/eval
# TODO set config to shuffle train/eval
# TODO look into existing context options?
# TODO look into existing tracking across frames
eval_input_reader: {
  tf_record_input_reader {
    #input_path: "{{ input_eval_tfrecord }}"
    #input_path: "/data/sharks/ckcgqorltvxoi08974xshx1wi_2020-10-19T0147_738.tfrecord"
    #input_path: "/data/new-sharks/tfrecord/ckcgqorltvxoi08974xshx1wi_2020-12-30T1944_806.tfrecord"
    input_path: "/data/mini-shark/tfrecord/ckcgqorltvxoi08974xshx1wi_2021-01-08T1930_10.tfrecord"
  }

  label_map_path: "/data/sharks/ckcgqorltvxoi08974xshx1wi_2020-10-19T0147.pbtxt"
  #label_map_path: "/data/new-sharks/tfrecord/ckcgqorltvxoi08974xshx1wi_2020-12-30T1944.pbtxt"
  label_map_path: "/data/mini-shark/tfrecord/ckcgqorltvxoi08974xshx1wi_2021-01-08T1930.pbtxt"

  # TODO try true?
  shuffle: false
  num_readers: 1
  include_source_id: true

  # for debugging only
  #num_parallel_batches: 1
  #num_prefetch_batches: 1
  #num_parallel_map_calls: 1

}
